// AUTO-GENERATED by scripts/consolidate-tests.js
// Consolidated tests for source: components\pages\StartPage

import { describe, it, expect } from 'vitest'
import { mount } from '@vue/test-utils'
import StartPage from '/src/components/pages/StartPage.vue'
import { describe, it, expect, vi } from 'vitest'
import { expect, test, vi } from 'vitest'
import LabelsBlock from '/src/components/blocks/LabelsBlock.vue'
import { LabelManager } from '/src/components/managers/LabelManager'


// from: test\components\StartPage.spec.ts
(() => {

describe('StartPage component', () => {
  it('renders hints and buttons', () => {
    const wrapper = mount(StartPage as unknown as Record<string, unknown>, { global: { mocks: { $q: { dark: { isActive: false } } }, stubs: { 'q-file': true, 'q-btn': true, 'q-icon': true } } })
    expect(wrapper.text()).toContain('Hint:')
  })
})

})();

// from: test\pages\startpage.spec.ts
(() => {

describe('StartPage template and loadFile binding', () => {
  it('calls store.commit via mapped loadFile mutation', () => {
    const commit = vi.fn()
    const store: any = { commit }
    const wrapper = mount(StartPage as any, { global: { mocks: { $store: store, $q: { dark: { isActive: false } } } } })
    const fakeFile = new File(['x'], 'doc.txt', { type: 'text/plain' })
    // call the mapped mutation directly
    ;(wrapper.vm as any).loadFile(fakeFile)
    expect(commit).toHaveBeenCalledWith('loadFile', fakeFile)
  })
})

})();

// from: test\pages\start_and_labels.spec.ts
(() => {

test('StartPage shows dark/bright logo based on $q.dark.isActive', () => {
  const wrapperDark = mount(StartPage, { global: { mocks: { $q: { dark: { isActive: true } } } } })
  expect(wrapperDark.html()).toContain('umaine-dark')
  const wrapperLight = mount(StartPage, { global: { mocks: { $q: { dark: { isActive: false } } } } })
  expect(wrapperLight.html()).toContain('umaine.png')
})

test('LabelsBlock saveLabel adds and duplicate path triggers notify and clear', async () => {
  const lm = new LabelManager([])
  const store = { state: { currentPage: 'annotate', labelManager: lm } }
  const mocks = { $q: { notify: vi.fn(), dialog: () => ({ onOk: () => {} }), dark: { isActive: false } }, $store: store }
  const wrapper = mount(LabelsBlock, { global: { mocks } })

  // call saveLabel when doesn't exist
  await wrapper.setData({ newClassName: 'test' })
  await (wrapper.vm as any).saveLabel()
  expect(lm.allLabels.length).toBe(1)

  // set duplicate name and call saveLabel to trigger notify
  await wrapper.setData({ newClassName: 'test' })
  await (wrapper.vm as any).saveLabel()
  expect(mocks.$q.notify).toHaveBeenCalled()
})

})();

