// AUTO-GENERATED by scripts/consolidate-tests.js
// Consolidated tests for source: components\managers\Store

import { describe, it, expect } from 'vitest'
import { store } from '/src/components/managers/Store'
import { describe, it, expect, beforeEach } from 'vitest'


// from: test\store.spec.ts
(() => {

describe('Store mutations', () => {
  it('processFile handles text files and creates tokenManagers', () => {
    // set fileName to a txt to hit text branch
    store.state.fileName = 'sample.txt'
    const text = 'one\ntwo\nthree'
    store.commit('processFile', text)
    expect(store.state.annotationManager).not.toBeNull()
    expect(store.state.tokenManagers?.length).toBe(store.state.annotationManager?.inputSentences.length)
  })

  it('processFile handles json files and sets labelManager via fromJSON', () => {
    const sample = {
      classes: [{ id: 1, name: 'A', color: 'red-11' }],
      annotations: [[null, 'hello', { entities: [] }]]
    }
    store.state.fileName = 'test.json'
    store.commit('processFile', JSON.stringify(sample))
    expect(store.state.labelManager).not.toBeNull()
    expect(store.state.currentIndex).toBe(0)
  })

  it('nextSentence and previousSentence update index appropriately', () => {
    store.state.currentIndex = 0
    const len = store.state.annotationManager?.inputSentences.length ?? 1
    if (len > 1) {
      store.commit('nextSentence')
      expect(store.state.currentIndex).toBeGreaterThanOrEqual(0)
      store.commit('previousSentence')
      expect(store.state.currentIndex).toBeGreaterThanOrEqual(0)
    } else {
      // If only one sentence, nextSentence should not increment
      store.commit('nextSentence')
      expect(store.state.currentIndex).toBe(0)
    }
  })

  it('setCurrentPage and setCurrentIndex and setTokenManager operate', () => {
    store.commit('setCurrentPage', 'annotate')
    expect(store.state.currentPage).toBe('annotate')
    store.commit('setCurrentIndex', 0)
    expect(store.state.currentIndex).toBe(0)
    // setTokenManager
    store.commit('setTokenManager', null)
    expect(store.state.tokenManager).toBeNull()
  })
})

})();

// from: test\store_loadfile.spec.ts
(() => {

// Mock FileReader globally for this suite
class MockFileReader {
  public result: string | null = null
  public onload: ((e: any) => void) | null = null
  public addEventListener(type: string, cb: (e: any) => void) {
    if (type === 'load') this.onload = cb
  }
  public readAsText(file: any) {
    // simulate async load
    setTimeout(() => {
      const e: any = { target: { result: file.__content } }
      this.onload && this.onload(e)
    }, 0)
  }
}

describe('Store.loadFile (mock FileReader)', () => {
  beforeEach(() => {
    // attach global FileReader
    ;(global as any).FileReader = MockFileReader
  })

  it('loadFile reads and processes a txt file via mocked FileReader', async () => {
    const fake = { name: 'doc.txt', __content: 'A\nB\nC' }
    store.commit('loadFile', fake as any)
    // wait a tick for async read
    await new Promise((resolve) => setTimeout(resolve, 50))
    expect(store.state.annotationManager).not.toBeNull()
    expect(store.state.tokenManagers?.length).toBeGreaterThan(0)
  })
})

})();

