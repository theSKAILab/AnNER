// AUTO-GENERATED by scripts/consolidate-tests.js
// Consolidated tests for source: misc

import { describe, it, expect, vi } from 'vitest'
// Define mockApp before any mocks that reference it
const mockApp = { config: { globalProperties: {} }, use: vi.fn(() => mockApp), mount: vi.fn(() => {}) }

vi.mock('vue', () => ({ createApp: () => mockApp }))
vi.mock('mitt', () => ({ default: () => ({ on: () => {}, off: () => {}, emit: () => {} }) }))
vi.mock('quasar', () => ({ Notify: {}, Dialog: {}, Quasar: {} }))
vi.mock('quasar/icon-set/fontawesome-v5.js', () => ({ default: {} }))
vi.mock('../src/styles/quasar.scss', () => ({}))
import { describe, it, expect, vi } from 'vitest'
import { config } from '@vue/test-utils'


// from: test\main_bootstrap.spec.ts
(() => {

describe('main.ts bootstrap', () => {
  it('assigns emitter to app.config.globalProperties when run', async () => {
    // We can't import main.ts directly because it mounts the app; instead emulate minimal behavior
    const mockApp: any = { config: { globalProperties: {} }, use: () => mockApp, mount: () => {} }
    // emulate mitt
    const mitt = () => ({ on: () => {}, off: () => {}, emit: () => {} })
    // simulate assignment
    mockApp.config.globalProperties.emitter = mitt()
    expect(mockApp.config.globalProperties.emitter).toBeDefined()
    expect(typeof mockApp.config.globalProperties.emitter.emit).toBe('function')
  })
})

})();

// from: test\main_import.spec.ts
(() => {

// Mock createApp from 'vue' so importing main.ts doesn't mount a real app
// Use the module-level `mockApp` defined above so the vi.mock factory returns the same object
mockApp.config.globalProperties = {}
mockApp.use = vi.fn(() => mockApp)
mockApp.mount = vi.fn(() => {})

// Mock mitt so main.ts gets a simple emitter

// Mock Quasar imports used in main.ts (two-argument form)

// Prevent importing actual styles

describe('main.ts import', () => {
  it('runs bootstrap without mounting a real app and sets emitter', async () => {
    // Import the file under test; mocks above will be used
    await import('/src/main.ts')
  // createApp mock should have been used and emitter assigned
  const gp = mockApp.config.globalProperties as unknown as { emitter?: { emit: () => void } }
  expect(gp.emitter).toBeDefined()
  expect(typeof gp.emitter!.emit).toBe('function')
  }, 20000)
})

})();

// from: test\managers\annotation_manager_additional.spec.ts
(() => {

describe('annotation_manager_additional (placeholder)', () => {
	it('placeholder test to ensure file is not empty', () => {
		expect(true).toBe(true)
	})
})

})();

// from: test\pages\annotationpage_additional.spec.ts
(() => {

describe('annotationpage_additional (placeholder)', () => {
	it('placeholder test to ensure file is not empty', () => {
		expect(true).toBe(true)
	})
})

})();

// from: test\test-setup.ts
(() => {
// Global test setup: provide richer Quasar and globalProperties stubs used by components

// A simple emitter shim (like mitt) so components that access app.config.globalProperties.emitter won't crash
const emitter = {
  on: vi.fn(),
  off: vi.fn(),
  emit: vi.fn(),
}

// Provide default mocks for Quasar's $q used across components: dark mode, dialog, and notify
config.global.mocks = {
  $q: {
    dark: { isActive: false, toggle: vi.fn() },
    // dialog commonly returns a promise; provide a mock that resolves immediately
    dialog: vi.fn(() => Promise.resolve({})),
    notify: vi.fn(),
  },
}

// Make emitter available on the default globalProperties so components accessing
// `appContext.config.globalProperties.emitter` during mounting find it.
// Vue Test Utils will pick this up when mounting components unless overridden per-test.
// Expose emitter via the test-utils mocks so mounting picks it up as a global property
const _globalMocks = config.global.mocks as Record<string, unknown>
_globalMocks['emitter'] = emitter

// Also attach to globalThis for any direct access paths used in older tests
;(globalThis as unknown as { emitter?: typeof emitter }).emitter = emitter

// Stub common Quasar components so tests don't need the full Quasar library.
// Make stubs render their default slot so inner text and children are preserved
const passthroughStub = { template: '<div><slot /></div>' }
config.global.stubs = {
  'q-btn': passthroughStub,
  'q-item-section': passthroughStub,
  'q-item': passthroughStub,
  'q-list': passthroughStub,
  'q-menu': passthroughStub,
  'q-icon': passthroughStub,
  'q-header': passthroughStub,
  'q-toolbar': passthroughStub,
  // Additional dialog/card components
  'q-dialog': passthroughStub,
  'q-card': passthroughStub,
  'q-card-section': passthroughStub,
  'q-card-actions': passthroughStub,
}

// Stub Quasar directives used in templates
config.global.directives = {
  'close-popup': {},
}

// Provide a test app version constant used by AboutDialog.vue
;(globalThis as unknown as { __APP_VERSION__?: string }).__APP_VERSION__ = 'test'

})();

